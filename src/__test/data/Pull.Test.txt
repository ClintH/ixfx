import test from "ava";
import * as Rx from '../../rx/index.js';
import { pull } from "../../data/Pull.js";
import * as Mod from '../../modulation/index.js';
import * as Iter from '../../iterables/index.js';
import * as Flow from '../../flow/index.js';

test(`pull-1`, async t => {
  const r1 = Rx.From.number(0);
  const a = {
    size: 10,
    float: Math.random(),
    rxNumber: r1
  }
  const r1Pull = pull(a);
  const r1Value = await r1Pull.compute();
  t.is(r1Value.size, 10);
  t.is(r1Value.rxNumber, 0);
  t.true(typeof r1Value.float === `number`);
});

test(`pull-2`, async t => {
  const counter = () => {
    let x = 0;
    return () => {
      x++;
      return x;
    };
  }
  const v1 = {
    name: `hello`,
    random: Rx.From.func(Math.random, { interval: 100, debugLabel: `random` }),
    gen: Mod.pingPong(1, 0, 5),
    count: counter()
  }

  // Create a pull mechanism
  const p1 = pull(v1);

  // Run an async function 10 times
  const p1Loop = await Flow.repeatAwait(10, async () => {
    await Flow.sleep(100);
    const r = await p1.compute();
    return r;
  });
  const p1Data = await Iter.toArray(p1Loop);
  //console.log(p1Data);
  let count = 1;
  for (const d of p1Data) {
    if (count === 1) t.falsy(d.random);
    t.is(d.name, `hello`);
    t.is(d.count, count++);
    // @ts-expect-error
    t.true(d.gen <= 5);
    // @ts-expect-error
    t.true(d.gen >= 0);
  }
  p1.dispose();
});