{
  "version": 3,
  "sources": ["../src/geometry/Line.ts", "../src/geometry/Rect.ts", "../src/geometry/Point.ts", "../src/geometry/Bezier.ts", "../node_modules/bezier-js/src/utils.js", "../node_modules/bezier-js/src/poly-bezier.js", "../node_modules/bezier-js/src/bezier.js", "../src/geometry/Path.ts", "../src/geometry/MultiPath.ts", "../src/modulation/Envelope.ts", "../src/util.ts", "../src/modulation/PathEnvelope.ts", "../src/modulation/Easing.ts", "../src/SlidingWindow.ts", "../src/visualisation/BasePlot.ts", "../src/visualisation/Plot.ts", "../src/visualisation/Drawing.ts"],
  "sourcesContent": ["import * as Rects from './Rect.js';\r\nimport {Point, pointToString} from './Point.js';\r\nimport {guard as guardPoint} from './Point.js';\r\nimport {Path} from './Path.js';\r\n\r\nexport type Line = Path & {\r\n  readonly a: Point\r\n  readonly b: Point\r\n}\r\n\r\nexport function length(a: Point, b: Point): number {\r\n  guardPoint(a, 'a');\r\n  guardPoint(a, 'b');\r\n\r\n  const x = b.x - a.x;\r\n  const y = b.y - a.y;\r\n  if (a.z !== undefined && b.z !== undefined) {\r\n    const z = b.z - a.z;\r\n    return Math.hypot(x, y, z);\r\n  } else {\r\n    return Math.hypot(x, y);\r\n  }\r\n}\r\n\r\n\r\nfunction guardPercent(t: number, name = 'Parameter') {\r\n  if (isNaN(t)) throw Error(`${name} is NaN`);\r\n  if (t < 0) throw Error(`${name} must be above or equal to 0`);\r\n  if (t > 1) throw Error(`${name} must be below or equal to 1`);\r\n}\r\n\r\nexport function compute(a: Point, b: Point, t: number): Point {\r\n  guardPoint(a, 'a');\r\n  guardPoint(b, 'b');\r\n  if (t > 1) debugger;\r\n  guardPercent(t, 't');\r\n\r\n  const d = length(a, b);\r\n  const d2 = d * (1 - t);\r\n\r\n  const x = b.x - (d2 * (b.x - a.x) / d);\r\n  const y = b.y - (d2 * (b.y - a.y) / d);\r\n  return {x: x, y: y};\r\n}\r\n\r\nexport function bbox(...points: Point[]): Rects.Rect {\r\n  const x = points.map(p => p.x);\r\n  const y = points.map(p => p.y);\r\n\r\n  const xMin = Math.min(...x);\r\n  const xMax = Math.max(...x);\r\n  const yMin = Math.min(...y);\r\n  const yMax = Math.max(...y);\r\n\r\n\r\n  return Rects.fromTopLeft(\r\n    {x: xMin, y: yMin},\r\n    xMax - xMin,\r\n    yMax - yMin\r\n  );\r\n}\r\n\r\nexport function toString(a: Point, b: Point): string {\r\n  return pointToString(a) + '-' + pointToString(b);\r\n}\r\n\r\nexport function fromNumbers(x1: number, y1: number, x2: number, y2: number): Line {\r\n  const a = {x: x1, y: y1};\r\n  const b = {x: x2, y: y2};\r\n  return fromPoints(a, b);\r\n}\r\n\r\nexport function fromPoints(a: Point, b: Point): Line {\r\n  a = Object.freeze(a);\r\n  b = Object.freeze(b);\r\n  return Object.freeze({\r\n    a: a,\r\n    b: b,\r\n    length: () => length(a, b),\r\n    compute: (t) => compute(a, b, t),\r\n    bbox: () => bbox(a, b),\r\n    toString: () => toString(a, b),\r\n  });\r\n}", "import {Point} from './Point.js';\r\n\r\nexport enum RectCorner {\r\n  TopLeft = 0,\r\n  TopRight = 1,\r\n  BottomRight = 2,\r\n  BottomLeft = 3\r\n}\r\n\r\nexport type Rect = {\r\n  readonly width: number,\r\n  readonly height: number,\r\n  readonly corners: Point[]\r\n}\r\n\r\n// Assumes coordinates top-left, clockwise\r\nexport const rectFromPoints = function (...pts: Point[]): Rect {\r\n  if (pts.length != 4) throw Error('Expected four points');\r\n\r\n  const width = Math.abs(pts[RectCorner.BottomRight].x - pts[RectCorner.BottomLeft].x);\r\n  const height = Math.abs(pts[RectCorner.BottomLeft].y - pts[RectCorner.TopLeft].y);\r\n\r\n  pts = pts.map(p => Object.freeze(p));\r\n\r\n  return Object.freeze({\r\n    width: width,\r\n    height: height,\r\n    corners: pts\r\n  });\r\n}\r\n\r\nexport const fromCenter = function (origin: Point, width: number, height: number): Rect {\r\n  guardDim(width, 'width');\r\n  guardDim(height, 'height');\r\n\r\n  let halfW = width / 2;\r\n  let halfH = height / 2;\r\n  let pts = [];\r\n  pts.push({x: origin.x - halfW, y: origin.y - halfH});\r\n  pts.push({x: origin.x + halfW, y: origin.y - halfH});\r\n  pts.push({x: origin.x + halfW, y: origin.y + halfH});\r\n  pts.push({x: origin.x - halfW, y: origin.y + halfH});\r\n  return rectFromPoints(...pts);\r\n}\r\n\r\nconst guardDim = function (d: number, name: string = 'Dimension') {\r\n  if (isNaN(d)) throw Error(`${name} is NaN`);\r\n  if (d < 0) throw Error(`${name} cannot be negative`);\r\n}\r\n\r\nexport const fromTopLeft = function (origin: Point, width: number, height: number): Rect {\r\n  guardDim(width, 'width');\r\n  guardDim(height, 'height');\r\n\r\n  let pts = [origin];\r\n  pts.push({x: origin.x + width, y: origin.y});\r\n  pts.push({x: origin.x + width, y: origin.y + height});\r\n  pts.push({x: origin.x, y: origin.y + height});\r\n  return rectFromPoints(...pts);\r\n}", "export const pointToString = function (p: Point): string {\r\n  if (p.z !== undefined)\r\n    return `(${p.x},${p.y},${p.z})`;\r\n  else\r\n    return `(${p.x},${p.y})`;\r\n}\r\n\r\nexport const guard = function (p: Point, name = 'Point') {\r\n  if (p === undefined) throw Error(`${name} is undefined`);\r\n  if (p === null) throw Error(`${name} is null`);\r\n}\r\n\r\nexport const toArray = function (p: Point): number[] {\r\n  return [p.x, p.y];\r\n}\r\n\r\nexport const equals = function (a: Point, b: Point): boolean {\r\n  return a.x == b.x && a.y == b.y;\r\n}\r\n\r\nexport const scale = function (a: Point, x: number, y: number | undefined = undefined): Point {\r\n  if (y === undefined) y = x;\r\n  return {x: a.x * x, y: a.y * y}\r\n}\r\n\r\nexport type Point = {\r\n  readonly x: number\r\n  readonly y: number\r\n  readonly z?: number\r\n}\r\n", "\r\nimport {Bezier as BezierLib} from 'bezier-js';\r\n\r\nimport * as Paths from './Path.js';\r\nimport * as Points from './Point.js';\r\nimport * as Rects from './Rect.js';\r\nimport * as Lines from './Line.js';\r\n\r\nexport type QuadraticBezier = Paths.Path & {\r\n  a: Points.Point,\r\n  b: Points.Point,\r\n  quadratic: Points.Point\r\n}\r\n/**\r\n * Returns a new quadratic bezier with specified bend amount\r\n *\r\n * @param {QuadraticBezier} b Curve\r\n * @param {number} [bend=0] Bend amount, from -1 to 1\r\n * @returns {QuadraticBezier}\r\n */\r\nexport const quadraticBend = function (b: QuadraticBezier, bend: number = 0): QuadraticBezier {\r\n  return quadraticSimple(b.a, b.b, bend);\r\n}\r\n\r\n/**\r\n * Creates a simple quadratic bezier with a specified amount of 'bend'.\r\n * Bend of -1 will pull curve down, 1 will pull curve up. 0 is no curve\r\n * @param {Points.Point} start Start of curbe\r\n * @param {Points.Point} end End of curbe\r\n * @param {number} [bend=0] Bend amount, -1 to 1\r\n * @returns {QuadraticBezier}\r\n */\r\nexport const quadraticSimple = function (start: Points.Point, end: Points.Point, bend: number = 0): QuadraticBezier {\r\n  if (isNaN(bend)) throw Error('bend is NaN');\r\n  if (bend < -1 || bend > 1) throw Error('Expects bend range of -1 to 1');\r\n\r\n  let middle = Lines.compute(start, end, 0.5);\r\n  let target = middle;\r\n  if (end.y < start.y) {\r\n    // Upward slope\r\n    target = bend > 0 ? {x: Math.min(start.x, end.x), y: Math.min(start.y, end.y)} :\r\n      {x: Math.max(start.x, end.x), y: Math.max(start.y, end.y)}\r\n  } else {\r\n    // Downward slope\r\n    target = bend > 0 ? {x: Math.max(start.x, end.x), y: Math.min(start.y, end.y)} :\r\n      {x: Math.min(start.x, end.x), y: Math.max(start.y, end.y)}\r\n  }\r\n\r\n  let handle = Lines.compute(middle, target, Math.abs(bend));\r\n  //console.log(`bend: ${bend} middle: ${middle.x},${middle.y} handle: ${handle.x}, ${handle.y}`);\r\n  return quadratic(start, end, handle);\r\n}\r\n\r\nexport const quadratic = function (start: Points.Point, end: Points.Point, handle: Points.Point): QuadraticBezier {\r\n  const b = new BezierLib(start, handle, end);\r\n  return Object.freeze({\r\n    a: start,\r\n    b: end,\r\n    quadratic: handle,\r\n    length: () => b.length(),\r\n    compute: (t: number) => b.compute(t),\r\n    bbox: () => {\r\n      const {x, y} = b.bbox();\r\n      return Rects.fromTopLeft({x: x.min, y: y.min}, x.size!, y.size!);\r\n    },\r\n    toString: () => b.toString()\r\n  });\r\n}", "import { Bezier } from \"./bezier.js\";\n\n// math-inlining.\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = { x: 0, y: 0, z: 0 };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n  ],\n\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.121670472927803391204463153476262425607,\n    0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185,\n    0.086190161531953275917185202983742667185,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n  ],\n\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau's computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\n        };\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d\n          ? false\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t,\n      };\n    }\n  },\n\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y),\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n\n  between: function (v, m, M) {\n    return (\n      (m <= v && v <= M) ||\n      utils.approximately(v, m) ||\n      utils.approximately(v, M)\n    );\n  },\n\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y),\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n    return s;\n  },\n\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return { mdist: mdist, mpos: mpos };\n  },\n\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx =\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return { x: nx / d, y: ny / d };\n  },\n\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n\n  makeline: function (p1, p2) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      dx = (x2 - x1) / 3,\n      dy = (y2 - y1) / 3;\n    return new Bezier(\n      x1,\n      y1,\n      x1 + dx,\n      y1 + dy,\n      x1 + 2 * dx,\n      y1 + 2 * dy,\n      x2,\n      y2\n    );\n  },\n\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\n    };\n  },\n\n  shapeintersections: function (\n    s1,\n    bbox1,\n    s2,\n    bbox2,\n    curveIntersectionThreshold\n  ) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end]),\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(\n        shape,\n        shape.bbox,\n        s2,\n        s2.bbox,\n        curveIntersectionThreshold\n      );\n    };\n    return shape;\n  },\n\n  getminmax: function (curve, d, list) {\n    if (!list) return { min: 0, max: 0 };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n  },\n\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\n        };\n      };\n    return points.map(d);\n  },\n\n  roots: function (points, line) {\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n\n    return [];\n  },\n\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'\u00B2 + y'\u00B2)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')\u00B2 + (z'x\" - z\"x')\u00B2 + (x'y\" - x\"y')\u00B2)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'\u00B2 + y'\u00B2 + z'\u00B2)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(\n        pow(d.y * dd.z - dd.y * d.z, 2) +\n          pow(d.z * dd.x - dd.z * d.x, 2) +\n          pow(d.x * dd.y - dd.x * d.y, 2)\n      );\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return { k: 0, r: 0 };\n    }\n\n    k = num / dnm;\n    r = dnm / num;\n\n    // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return { k: k, r: r, dk: dk, adk: adk };\n  },\n\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n\n    const trm = v2 * v2 - 4 * v1 * v3,\n      sq = Math.sqrt(trm),\n      d2 = 2 * v1;\n\n    if (utils.approximately(d2, 0)) return [];\n\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n      len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n\n    if (\n      c1b.x.size + c1b.y.size < threshold &&\n      c2b.x.size + c2b.y.size < threshold\n    ) {\n      return [\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\n          \"/\" +\n          (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\n      ];\n    }\n\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [\n        { left: cc1.left, right: cc2.left },\n        { left: cc1.left, right: cc2.right },\n        { left: cc1.right, right: cc2.right },\n        { left: cc1.right, right: cc2.left },\n      ];\n\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n\n    let results = [];\n\n    if (pairs.length === 0) return results;\n\n    pairs.forEach(function (pair) {\n      results = results.concat(\n        utils.pairiteration(pair.left, pair.right, threshold)\n      );\n    });\n\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n\n    return results;\n  },\n\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n\n  numberSort: function (a, b) {\n    return a - b;\n  },\n};\n\nexport { utils };\n", "import { utils } from \"./utils.js\";\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      \"[\" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(\", \") +\n      \"]\"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\nexport { PolyBezier };\n", "/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n\nimport { utils } from \"./utils.js\";\nimport { PolyBezier } from \"./poly-bezier.js\";\n\n// math-inlining.\nconst { abs, min, max, cos, sin, acos, sqrt } = Math;\nconst pi = Math.PI;\n// a zero coordinate, which is surprisingly useful\nconst ZERO = { x: 0, y: 0, z: 0 };\n\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\nclass Bezier {\n  constructor(coords) {\n    let args =\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n      }\n    }\n\n    const _3d = (this._3d =\n      (!higher && (len === 9 || len === 12)) ||\n      (coords && coords[0] && typeof coords[0].z !== \"undefined\"));\n\n    const points = (this.points = []);\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1],\n      };\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n      points.push(point);\n    }\n    const order = (this.order = points.length - 1);\n\n    const dims = (this.dims = [\"x\", \"y\"]);\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\n    this._linear = !aligned.some((p) => abs(p.y) > 0.0001);\n\n    this._lut = [];\n\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    // shortcuts, although they're really dumb\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    }\n    // real fitting.\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    const abc = Bezier.getABC(3, S, B, E, t);\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n    const d2 = (d1 * (1 - t)) / t;\n\n    const selen = utils.dist(S, E),\n      lx = (E.x - S.x) / selen,\n      ly = (E.y - S.y) / selen,\n      bx1 = d1 * lx,\n      by1 = d1 * ly,\n      bx2 = d2 * lx,\n      by2 = d2 * ly;\n    // derivation of new hull coordinates\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\n      e2 = { x: B.x + bx2, y: B.y + by2 },\n      A = abc.A,\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\n      nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t),\n      };\n    // ...done\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n      x = p[0].x,\n      y = p[0].y,\n      s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points\n      .map(function (c, pos) {\n        return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n      })\n      .join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n      um = 1 - u,\n      C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y,\n      },\n      s = utils.abcratio(t, order),\n      A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s,\n      };\n    return { A, B, C, S, E };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n    this._lut = [];\n    // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n    steps--;\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n      this._lut.push(p);\n    }\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n      hits = [];\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n    if (!hits.length) return false;\n    return (t /= hits.length);\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n      l = LUT.length - 1,\n      closest = utils.closest(LUT, point),\n      mpos = closest.mpos,\n      t1 = (mpos - 1) / l,\n      t2 = (mpos + 1) / l,\n      step = 0.1 / l;\n\n    // step 2: fine check\n    let mdist = closest.mdist,\n      t = t1,\n      ft = t,\n      p;\n    mdist += 1;\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n      np = [p[0]],\n      k = p.length;\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\n      };\n    }\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0], this._3d);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1], this._3d);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt(d.x * d.x + d.y * d.y);\n    return { x: -d.y / q, y: d.x / q };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n      r2 = this.derivative(t + 0.01),\n      q1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n      q2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2;\n    // cross product\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x,\n    };\n    const m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m;\n    // rotation matrix\n    const R = [\n      c.x * c.x,\n      c.x * c.y - c.z,\n      c.x * c.z + c.y,\n      c.x * c.y + c.z,\n      c.y * c.y,\n      c.y * c.z - c.x,\n      c.x * c.z - c.y,\n      c.y * c.z + c.x,\n      c.z * c.z,\n    ];\n    // normal vector:\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n      _p = [],\n      q = [],\n      idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    }\n    // we lerp between all points at each iteration, until we have 1 point left.\n    while (p.length > 1) {\n      _p = [];\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n        _p.push(pt);\n      }\n      p = _p;\n    }\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n    if (t2 === 1) {\n      return this.split(t1).right;\n    }\n\n    // no shortcut: use \"de Casteljau\" iteration.\n    const q = this.hull(t1);\n    const result = {\n      left:\n        this.order === 2\n          ? new Bezier([q[0], q[3], q[5]])\n          : new Bezier([q[0], q[4], q[7], q[9]]),\n      right:\n        this.order === 2\n          ? new Bezier([q[5], q[4], q[2]])\n          : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q,\n    };\n\n    // make sure we bind _t1/_t2 information!\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\n\n    // if we have no t2, we're done\n    if (!t2) {\n      return result;\n    }\n\n    // if we have a t2, split again:\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n\n    this.dims.forEach(\n      function (dim) {\n        let mfn = function (v) {\n          return v[dim];\n        };\n        let p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this)\n    );\n\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n      result = {};\n    this.dims.forEach(\n      function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this)\n    );\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n      tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n        n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d,\n      };\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n      return ret;\n    }\n    if (this._linear) {\n      const nv = this.normal(0),\n        coords = this.points.map(function (p) {\n          const ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y,\n          };\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n          return ret;\n        });\n      return [new Bezier(coords)];\n    }\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\n    }\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n    return abs(acos(s)) < pi / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n      t1 = 0,\n      t2 = 0,\n      step = 0.01,\n      segment,\n      pass1 = [],\n      pass2 = [];\n    // first pass: split on extrema\n    let extrema = this.extrema().values;\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    }\n\n    // second pass: further reduce these segments to simple segments\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n          if (!segment.simple()) {\n            t2 -= step;\n            if (abs(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    }\n\n    // TODO: add special handling for degenerate (=linear) curves.\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    }\n    // move all points by distance 'd' wrt the origin 'o'\n\n    // move end points by fixed distance along normal.\n    [0, 1].forEach(function (t) {\n      const p = (np[t * order] = utils.copy(points[t * order]));\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach((t) => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    }\n\n    // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y,\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y,\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === \"undefined\" ? d1 : d2;\n    const reduced = this.reduce(),\n      len = reduced.length,\n      fcurves = [];\n\n    let bcurves = [],\n      p,\n      alen = 0,\n      tlen = this.length();\n\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n          f2 = (alen + slen) / tlen,\n          d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    }\n\n    // form curve oulines\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n      if (graduated) {\n        fcurves.push(\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\n        );\n        bcurves.push(\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\n        );\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n      alen += slen;\n    });\n\n    // reverse the \"return\" outline\n    bcurves = bcurves\n      .map(function (s) {\n        p = s.points;\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n        return s;\n      })\n      .reverse();\n\n    // form the endcaps as lines\n    const fs = fcurves[0].points[0],\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n      be = bcurves[0].points[0],\n      ls = utils.makeline(bs, fs),\n      le = utils.makeline(fe, be),\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n      slen = segments.length;\n\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(\n        outline[i],\n        outline[len - i],\n        curveIntersectionThreshold\n      );\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n    return this.curveintersects(\n      this.reduce(),\n      curve,\n      curveIntersectionThreshold\n    );\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n      my = min(line.p1.y, line.p2.y),\n      MX = max(line.p1.x, line.p2.x),\n      MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter((t) => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n\n    const reduced = this.reduce(),\n      len = reduced.length - 2,\n      results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = [];\n    // step 1: pair off any overlapping segments\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({ left: l, right: r });\n        }\n      });\n    });\n    // step 2: for each pairing, run through the convergence algorithm.\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(\n        pair.left,\n        pair.right,\n        curveIntersectionThreshold\n      );\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n      c1 = this.get(s + q),\n      c2 = this.get(e - q),\n      ref = utils.dist(pc, np1),\n      d1 = utils.dist(pc, c1),\n      d2 = utils.dist(pc, c2);\n    return abs(d1 - ref) + abs(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n      t_e = 1,\n      safety;\n    // we do a binary search to find the \"good `t` closest to no-longer-good\"\n    do {\n      safety = 0;\n\n      // step 1: start with the maximum possible arc\n      t_e = 1;\n\n      // points:\n      let np1 = this.get(t_s),\n        np2,\n        np3,\n        arc,\n        prev_arc;\n\n      // booleans:\n      let curr_good = false,\n        prev_good = false,\n        done;\n\n      // numbers:\n      let t_m = t_e,\n        prev_e = 1,\n        step = 0;\n\n      // step 2: find the best possible arc\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        step++;\n\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n\n        arc = utils.getccenter(np1, np2, np3);\n\n        //also save the t values\n        arc.interval = {\n          start: t_s,\n          end: t_e,\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n        curr_good = error <= errorThreshold;\n\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e;\n\n        // this arc is fine: we can move 'e' up to see if we can find a wider arc\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc;\n            // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos(arc.e),\n                y: arc.y + arc.r * sin(arc.e),\n              };\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\n            }\n            break;\n          }\n          // if not, move it up by half the iteration distance\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      }\n\n      // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n    return circles;\n  }\n}\n\nexport { Bezier };\n", "\r\nimport {Point} from './Point.js';\r\nimport * as Rects from './Rect.js';\r\n\r\nexport type Path = {\r\n  length(): number\r\n  compute(t: number): Point\r\n  bbox(): Rects.Rect\r\n  toString(): string\r\n}\r\n\r\nexport const getStart = function (path: Path): Point {\r\n  let p = path as any;\r\n  if (p.a && p.b) return p.a as Point;\r\n  throw Error('Cannot get start for path');\r\n}\r\n\r\nexport const getEnd = function (path: Path): Point {\r\n  let p = path as any;\r\n  if (p.a && p.b) return p.b as Point;\r\n  throw Error('Cannot get end for path');\r\n}\r\n", "import {Points} from \"../index.js\";\r\nimport * as Paths from \"./Path.js\";\r\nimport * as Rects from './Rect.js';\r\n\r\nexport type MultiPath = Paths.Path & {\r\n  segments: Paths.Path[]\r\n}\r\n\r\nexport const setSegment = function (multiPath: MultiPath, index: number, path: Paths.Path): MultiPath {\r\n  let existing = multiPath.segments;\r\n  existing[index] = path;\r\n  return fromPaths(...existing);\r\n}\r\n\r\nexport const fromPaths = function (...paths: Paths.Path[]): MultiPath {\r\n  // Sanity check paths are connected\r\n  let lastPos = Paths.getEnd(paths[0]);\r\n  for (let i = 1; i < paths.length; i++) {\r\n    let start = Paths.getStart(paths[i]);\r\n    if (!Points.equals(start, lastPos))\r\n      throw Error('Path index ' + i + ' does not start at prior path end. Start: ' + start.x + ',' + start.y + ' expected: ' + lastPos.x + ',' + lastPos.y + '');\r\n    lastPos = Paths.getEnd(paths[i]);\r\n  }\r\n\r\n  let widths = paths.map(l => l.bbox().width);\r\n  let lengths = paths.map(l => l.length());\r\n  let totalLength = 0;\r\n  let totalWidth = 0;\r\n  for (let i = 0; i < lengths.length; i++) totalLength += lengths[i];\r\n  for (let i = 0; i < widths.length; i++) totalWidth += widths[i];\r\n\r\n  return Object.freeze({\r\n    segments: paths,\r\n    length: () => totalLength,\r\n    compute: (t: number, useWidth: boolean = false) => {\r\n      // Expected value to land on\r\n      const expected = t * (useWidth ? totalWidth : totalLength);\r\n      let soFar = 0;\r\n\r\n      // Use widths or lengths?\r\n      let l = useWidth ? widths : lengths;\r\n      for (let i = 0; i < l.length; i++) {\r\n        if (soFar + l[i] >= expected) {\r\n          let relative = expected - soFar;\r\n          let amt = relative / l[i];\r\n          if (amt > 1) amt = 1;\r\n          return paths[i].compute(amt);\r\n        } else soFar += l[i];\r\n      }\r\n      return {x: 0, y: 0}\r\n    },\r\n    bbox: () => {\r\n      return Rects.fromTopLeft({x: 0, y: 0}, 10, 10)\r\n    },\r\n    toString: () => {\r\n      let s = paths.map(p => p.toString()).join(', ');\r\n      return s;\r\n    }\r\n  });\r\n}\r\n", "import {pathEnvelope} from \"./PathEnvelope\";\r\n\r\nexport {pathEnvelope};\r\n\r\nexport type StageOpts = {\r\n  timerSource?: TimerSource\r\n  looping?: boolean\r\n  attackDuration?: number,\r\n  decayDuration?: number,\r\n  releaseDuration?: number\r\n}\r\n\r\nexport enum EnvelopeStage {\r\n  Stopped = 0,\r\n  Attack = 1,\r\n  Decay = 2,\r\n  Sustain = 3,\r\n  Release = 4\r\n}\r\n\r\nexport type Envelope = {\r\n  trigger(): void\r\n  reset(): void\r\n  hold(): void\r\n  release(): void\r\n  compute(): [EnvelopeStage, number]\r\n}\r\n\r\ntype Timer = {\r\n  reset(): void\r\n  elapsed(): number\r\n}\r\n\r\ntype TimerSource = () => Timer;\r\n\r\nexport const msRelativeTimer = function (): Timer {\r\n  let start = performance.now();\r\n  return {\r\n    reset: () => {\r\n      start = performance.now();\r\n    },\r\n    elapsed: () => {\r\n      return (performance.now() - start);\r\n    }\r\n  }\r\n}\r\n\r\nexport const tickRelativeTimer = function (): Timer {\r\n  let start = 0;\r\n  return {\r\n    reset: () => {\r\n      start = 0;\r\n    },\r\n    elapsed: () => {\r\n      return start++;\r\n    }\r\n  }\r\n}\r\n\r\nexport const stageToText = function (stage: EnvelopeStage): string {\r\n  switch (stage) {\r\n    case EnvelopeStage.Attack:\r\n      return 'Attack';\r\n    case EnvelopeStage.Decay:\r\n      return 'Decay';\r\n    case EnvelopeStage.Release:\r\n      return 'Release';\r\n    case EnvelopeStage.Stopped:\r\n      return 'Stopped';\r\n    case EnvelopeStage.Sustain:\r\n      return 'Sustain'\r\n  }\r\n}\r\n\r\nexport const stages = function (opts: StageOpts = {}): Readonly<Envelope> {\r\n  const {looping = false} = opts;\r\n  const {timerSource = msRelativeTimer} = opts;\r\n  const {attackDuration = 300} = opts;\r\n  const {decayDuration = 500} = opts;\r\n  const {releaseDuration = 1000} = opts;\r\n\r\n  let stage = EnvelopeStage.Stopped;\r\n  let timer: Timer | null = null;\r\n  let isHeld = false;\r\n\r\n  const setStage = (newStage: EnvelopeStage) => {\r\n    if (stage == newStage) return;\r\n    //console.log('Envelope stage ' + stageToText(stage) + ' -> ' + stageToText(newStage));\r\n    stage = newStage;\r\n    if (stage == EnvelopeStage.Attack)\r\n      timer = timerSource();\r\n    else if (stage == EnvelopeStage.Release)\r\n      timer = timerSource();\r\n  }\r\n\r\n  const compute = (): [EnvelopeStage, number] => {\r\n    if (stage == EnvelopeStage.Stopped) return [0, 0];\r\n    if (timer == null) throw Error('Bug: timer is null');\r\n\r\n    if (stage == EnvelopeStage.Sustain) return [stage, 1];\r\n\r\n    let elapsed = timer.elapsed();\r\n\r\n    if (stage == EnvelopeStage.Release) {\r\n      let relative = elapsed / releaseDuration;\r\n      if (relative > 1) {\r\n        if (looping) {\r\n          // Trigger, even if originally held\r\n          trigger();\r\n        } else {\r\n          setStage(EnvelopeStage.Stopped);\r\n        }\r\n        return [stage, 0];\r\n      }\r\n      return [stage, relative];\r\n    }\r\n\r\n\r\n    if (elapsed <= attackDuration) {\r\n      // Within attack\r\n      return [stage, elapsed / attackDuration];\r\n    } else if (elapsed <= decayDuration + attackDuration) {\r\n      // Within decay\r\n      if (stage == EnvelopeStage.Attack) setStage(EnvelopeStage.Decay);\r\n      return [stage, (elapsed - attackDuration) / decayDuration];\r\n    } else {\r\n      // Within sustain\r\n      if (stage == EnvelopeStage.Decay) setStage(EnvelopeStage.Sustain);\r\n      if (!isHeld) {\r\n        setStage(EnvelopeStage.Release);\r\n      }\r\n      return [stage, 0];\r\n    }\r\n  }\r\n\r\n  const trigger = () => {\r\n    isHeld = false;\r\n    setStage(EnvelopeStage.Attack);\r\n  }\r\n\r\n  const hold = () => {\r\n    isHeld = true;\r\n    if (stage == EnvelopeStage.Stopped) {\r\n      setStage(EnvelopeStage.Attack);\r\n    } else {\r\n      setStage(EnvelopeStage.Sustain);\r\n    }\r\n  }\r\n\r\n  const release = () => {\r\n    if (!isHeld) throw Error('Not being held');\r\n\r\n    setStage(EnvelopeStage.Release);\r\n  }\r\n\r\n  const reset = () => {\r\n    setStage(EnvelopeStage.Stopped);\r\n  }\r\n\r\n  reset();\r\n\r\n  return Object.freeze({\r\n    trigger: trigger,\r\n    reset: reset,\r\n    release: release,\r\n    hold: hold,\r\n    compute: compute\r\n  });\r\n}", "export const clamp = function (v: number, min: number = 0, max: number = 1) {\r\n  if (v < min) return min;\r\n  if (v > max) return max;\r\n  return v;\r\n}", "import * as Envelopes from './Envelope.js';\r\nimport * as Beziers from '../geometry/Bezier.js';\r\nimport * as Lines from '../geometry/Line.js';\r\nimport {clamp} from '../util.js';\r\n\r\nexport type PathEnvelopeOpts = Envelopes.StageOpts & {\r\n  /**\r\n   * Sustain level from 0-1\r\n   *\r\n   * @type {number}\r\n   */\r\n  sustainLevel?: number;\r\n  attackBend?: number;\r\n  decayBend?: number;\r\n  releaseBend?: number;\r\n}\r\n\r\nexport const pathEnvelope = (opts: PathEnvelopeOpts): Readonly<Envelopes.Envelope> => {\r\n  let {sustainLevel = 0.5, attackBend = 0, decayBend = 0, releaseBend = 0} = opts;\r\n  sustainLevel = clamp(sustainLevel);\r\n\r\n  let env = Envelopes.stages(opts);\r\n  let max = 1;\r\n  let attack = Beziers.quadraticSimple({x: 0, y: 0}, {x: max, y: max}, attackBend);\r\n  let decay = Beziers.quadraticSimple({x: 0, y: max}, {x: max, y: sustainLevel}, decayBend);\r\n  let sustain = Lines.fromPoints({x: 0, y: sustainLevel}, {x: max, y: sustainLevel});\r\n  let release = Beziers.quadraticSimple({x: 0, y: sustainLevel}, {x: max, y: 0}, releaseBend);\r\n\r\n  let paths = [\r\n    null,\r\n    attack,\r\n    decay,\r\n    sustain,\r\n    release\r\n  ]\r\n  return Object.freeze({\r\n    trigger: () => {\r\n      env.trigger()\r\n    },\r\n    reset: () => {\r\n      env.reset();\r\n    },\r\n    release: () => {\r\n      env.release();\r\n    },\r\n    hold: () => {\r\n      env.hold();\r\n    },\r\n    compute: (): [Envelopes.EnvelopeStage, number] => {\r\n      let [stage, amt] = env.compute();\r\n      let p = paths[stage];\r\n      if (p == null) return [stage, 0];\r\n      return [stage, p.compute(amt).y];\r\n    }\r\n  });\r\n\r\n}", "// Easings from https://easings.net/\r\n\r\nimport {clamp} from \"../util\";\r\n\r\nconst sqrt = Math.sqrt;\r\nconst pow = Math.pow;\r\n\r\ntype RelativeTimer = {\r\n  reset(): void\r\n  elapsed(): number\r\n  isDone(): boolean\r\n}\r\n\r\ntype TimerSource = (upperBound: number) => RelativeTimer;\r\n\r\nconst msRelativeTimer = function (upperBound: number): RelativeTimer {\r\n  let start = performance.now();\r\n  return {\r\n    reset: () => {\r\n      start = performance.now();\r\n    },\r\n    elapsed: () => {\r\n      return clamp((performance.now() - start) / upperBound);\r\n    },\r\n    isDone: () => {\r\n      return (performance.now() - start) >= upperBound;\r\n    }\r\n  }\r\n}\r\n\r\nconst tickRelativeTimer = function (upperBound: number): RelativeTimer {\r\n  let start = 0;\r\n  return {\r\n    reset: () => {\r\n      start = 0;\r\n    },\r\n    elapsed: () => {\r\n      return clamp(start++ / upperBound);\r\n    },\r\n    isDone: () => {\r\n      return start >= upperBound;\r\n    }\r\n  }\r\n}\r\n\r\ntype EasingFn = (x: number) => number;\r\n\r\nexport const timer = function (easingName: string, durationMs: number) {\r\n  return create(easingName, durationMs, msRelativeTimer);\r\n}\r\n\r\nexport const tick = function (easingName: string, durationTicks: number) {\r\n  return create(easingName, durationTicks, tickRelativeTimer);\r\n}\r\n\r\nexport type Easing = {\r\n  compute(): number\r\n  reset(): void\r\n  isDone(): boolean\r\n}\r\n\r\nexport const create = function (easingName: string, duration: number, timerSource: TimerSource): Easing {\r\n  let fn = resolveEasing(easingName);\r\n  let timer = timerSource(duration);\r\n\r\n  return {\r\n    isDone: () => {\r\n      return timer.isDone();\r\n    },\r\n    compute: () => {\r\n      let relative = timer.elapsed();\r\n      return fn(relative);\r\n    },\r\n    reset: () => {\r\n      timer.reset();\r\n    }\r\n  }\r\n}\r\n\r\nconst resolveEasing = function (easingName: string): EasingFn {\r\n  let name = easingName.toLowerCase();\r\n  for (const [k, v] of Object.entries(easings)) {\r\n    if (k.toLowerCase() === name) {\r\n      console.log('Found: ' + k);\r\n      return v as EasingFn;\r\n\r\n    }\r\n  }\r\n  throw Error(`Easing '${easingName}' not found.`);\r\n}\r\n\r\nconst cos = Math.cos;\r\nconst PI = Math.PI;\r\nconst sin = Math.sin;\r\n\r\nconst easeOutBounce = function (x: number): number {\r\n  const n1 = 7.5625;\r\n  const d1 = 2.75;\r\n\r\n  if (x < 1 / d1) {\r\n    return n1 * x * x;\r\n  } else if (x < 2 / d1) {\r\n    return n1 * (x -= 1.5 / d1) * x + 0.75;\r\n  } else if (x < 2.5 / d1) {\r\n    return n1 * (x -= 2.25 / d1) * x + 0.9375;\r\n  } else {\r\n    return n1 * (x -= 2.625 / d1) * x + 0.984375;\r\n  }\r\n}\r\n\r\nconst easings = {\r\n\r\n  easeInSine: (x: number): number => {\r\n    return 1 - cos((x * PI) / 2);\r\n  },\r\n  easeOutSine: (x: number): number => {\r\n    return sin((x * PI) / 2);\r\n  },\r\n  easeInQuad: (x: number): number => {\r\n    return x * x;\r\n  },\r\n  easeOutQuad: (x: number): number => {\r\n    return 1 - (1 - x) * (1 - x);\r\n  },\r\n  easeInOutSine: (x: number): number => {\r\n    return -(cos(PI * x) - 1) / 2;\r\n  },\r\n  easeInOutQuad: (x: number): number => {\r\n    return x < 0.5 ? 2 * x * x : 1 - pow(-2 * x + 2, 2) / 2;\r\n  },\r\n  easeInCubic: (x: number): number => {\r\n    return x * x * x;\r\n  },\r\n  easeOutCubic: (x: number): number => {\r\n    return 1 - pow(1 - x, 3);\r\n  },\r\n  easeInQuart: (x: number): number => {\r\n    return x * x * x * x;\r\n  },\r\n  easeOutQuart: (x: number): number => {\r\n    return 1 - pow(1 - x, 4);\r\n  },\r\n  easeInQuint: (x: number): number => {\r\n    return x * x * x * x * x;\r\n  },\r\n  easeOutQuint: (x: number): number => {\r\n    return 1 - pow(1 - x, 5);\r\n  },\r\n  easeInExpo: (x: number): number => {\r\n    return x === 0 ? 0 : pow(2, 10 * x - 10);\r\n  },\r\n  easeOutExpo: (x: number): number => {\r\n    return x === 1 ? 1 : 1 - pow(2, -10 * x);\r\n  },\r\n  easeInOutQuint: (x: number): number => {\r\n    return x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2;\r\n  },\r\n  easeInOutExpo: (x: number): number => {\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : x < 0.5 ? pow(2, 20 * x - 10) / 2\r\n          : (2 - pow(2, -20 * x + 10)) / 2;\r\n  },\r\n  easeInCirc: (x: number): number => {\r\n    return 1 - sqrt(1 - pow(x, 2));\r\n  },\r\n  easeOutCirc: (x: number): number => {\r\n    return sqrt(1 - pow(x - 1, 2));\r\n  },\r\n  easeInBack: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n\r\n    return c3 * x * x * x - c1 * x * x;\r\n  },\r\n  easeOutBack: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n\r\n    return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2);\r\n  },\r\n  easeInOutCirc: (x: number): number => {\r\n    return x < 0.5\r\n      ? (1 - sqrt(1 - pow(2 * x, 2))) / 2\r\n      : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2;\r\n  },\r\n  easeInOutBack: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c2 = c1 * 1.525;\r\n\r\n    return x < 0.5\r\n      ? (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\r\n      : (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\r\n  },\r\n  easeInElastic: (x: number): number => {\r\n    const c4 = (2 * PI) / 3;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : -pow(2, 10 * x - 10) * sin((x * 10 - 10.75) * c4);\r\n  },\r\n  easeOutElastic: (x: number): number => {\r\n    const c4 = (2 * PI) / 3;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1;\r\n  },\r\n  easeInBounce: (x: number): number => {\r\n    return 1 - easeOutBounce(1 - x);\r\n  },\r\n  easeOutBounce: easeOutBounce,\r\n  easeInOutElastic: (x: number): number => {\r\n    const c5 = (2 * PI) / 4.5;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : x < 0.5\r\n          ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2\r\n          : (pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5)) / 2 + 1;\r\n  },\r\n  easeInOutBounce: (x: number): number => {\r\n    return x < 0.5\r\n      ? (1 - easeOutBounce(1 - 2 * x)) / 2\r\n      : (1 + easeOutBounce(2 * x - 1)) / 2;\r\n  }\r\n}", "export class SlidingWindow {\r\n  data: number[] = [];\r\n  index: number = 0;\r\n  size: number;\r\n  length: number = 0;\r\n  wrapped: boolean = false;\r\n\r\n  constructor(size: number = 5) {\r\n    this.size = size;\r\n    this.clear(size);\r\n  }\r\n\r\n  clear(size?: number) {\r\n    if (size === undefined) size = this.size;\r\n    this.size = size;\r\n    this.index = 0;\r\n    this.length = 0;\r\n    this.wrapped = false;\r\n    for (let i = 0; i < size; i++) {\r\n      this.data[i] = NaN;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add data to the window\r\n   *\r\n   * @param {number} v Value to add\r\n   * @memberof SlidingWindow\r\n   */\r\n  push(v: number) {\r\n    let idx = this.index;\r\n    this.data[idx++] = v;\r\n    if (idx == this.size) {\r\n      this.wrapped = true;\r\n      idx = 0;\r\n    } else this.length++;\r\n    this.index = idx;\r\n  }\r\n\r\n  toArray(): number[] {\r\n    if (!this.wrapped) {\r\n      return this.data.slice(0, this.length - 1);\r\n    } else {\r\n      return this.data.slice();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the current average\r\n   *\r\n   * @returns\r\n   * @memberof SlidingWindow\r\n   */\r\n  average(): number {\r\n    let total = 0;\r\n    let samples = 0;\r\n    for (let i = 0; i < this.size; i++) {\r\n      if (isNaN(this.data[i])) continue;\r\n      total += this.data[i];\r\n      samples++;\r\n    }\r\n    return total / samples;\r\n  }\r\n\r\n  max(): number {\r\n    let max = Number.MIN_SAFE_INTEGER;\r\n    for (let i = 0; i < this.size; i++) {\r\n      if (isNaN(this.data[i])) continue;\r\n      max = Math.max(this.data[i], max);\r\n    }\r\n    return max;\r\n  }\r\n\r\n  min(): number {\r\n    let min = Number.MAX_SAFE_INTEGER;\r\n    for (let i = 0; i < this.size; i++) {\r\n      if (isNaN(this.data[i])) continue;\r\n      min = Math.min(this.data[i], min);\r\n    }\r\n    return min;\r\n  }\r\n\r\n  getMinMaxAvg(): {min: number, max: number, avg: number} {\r\n    let min = Number.MAX_SAFE_INTEGER;\r\n    let total = 0;\r\n    let samples = 0;\r\n    let max = Number.MIN_SAFE_INTEGER;\r\n    for (let i = 0; i < this.size; i++) {\r\n      if (isNaN(this.data[i])) continue;\r\n      min = Math.min(this.data[i], min);\r\n      max = Math.max(this.data[i], max);\r\n      total += this.data[i];\r\n      samples++;\r\n    }\r\n    return {min: min, max: max, avg: total / samples}\r\n  }\r\n}", "\r\nexport class BasePlot {\r\n  canvasEl: HTMLCanvasElement;\r\n  precision: number;\r\n  paused: boolean;\r\n  scaleMin: number;\r\n  scaleMax: number;\r\n  allowScaleDeflation: boolean;\r\n  labelInset: number;\r\n  lastPaint: number;\r\n  maxPaintMs: number;\r\n  textHeight: number;\r\n  plotPadding: number = 10;\r\n  showMiddle: boolean = true;\r\n  showScale: boolean = true;\r\n  drawLoop: () => void;\r\n\r\n  constructor(canvasEl: HTMLCanvasElement) {\r\n    if (canvasEl === undefined) throw Error('canvasEl undefined');\r\n    this.canvasEl = canvasEl;\r\n    this.drawLoop = this.baseDraw.bind(this);\r\n    this.precision = 3;\r\n    this.paused = false;\r\n    this.allowScaleDeflation = false;\r\n    this.scaleMin = Number.MAX_SAFE_INTEGER;\r\n    this.scaleMax = Number.MIN_SAFE_INTEGER;\r\n    this.labelInset = 5;\r\n\r\n    this.lastPaint = 0;\r\n    this.maxPaintMs = 10; // Don't trigger paint within 10ms\r\n\r\n    canvasEl.addEventListener('pointerup', e => {\r\n      this.paused = !this.paused;\r\n      if (this.paused)\r\n        canvasEl.classList.add('paused');\r\n      else\r\n        canvasEl.classList.remove('paused');\r\n    });\r\n    const measure = this.canvasEl.getContext('2d')!.measureText('Xy');\r\n    this.textHeight = measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent;\r\n  }\r\n\r\n  pushScale(min: number, max: number) {\r\n    if (min > this.scaleMin && this.allowScaleDeflation) this.scaleMin = min;\r\n    else this.scaleMin = Math.min(min, this.scaleMin);\r\n\r\n    if (max < this.scaleMax && this.allowScaleDeflation) this.scaleMax = max;\r\n    else this.scaleMax = Math.max(max, this.scaleMax);\r\n    const range = this.scaleMax - this.scaleMin;\r\n    return range;\r\n  }\r\n\r\n  map(value: number, x1: number, y1: number, x2: number, y2: number) {\r\n    return (value - x1) * (y2 - x2) / (y1 - x1) + x2;\r\n  }\r\n\r\n  scaleNumber(v: number): string {\r\n    if (Math.abs(v) > 50) return Math.floor(v).toString();\r\n    return v.toFixed(this.precision);\r\n  }\r\n\r\n  drawScale(g: CanvasRenderingContext2D, min: number, max: number, avg: number, range: number, plotWidth: number, plotHeight: number) {\r\n    if (!this.showScale) return;\r\n    const labelInset = this.labelInset;\r\n    const textHalf = this.textHeight / 3;\r\n    const rightJustif = plotWidth - 40;\r\n\r\n    g.fillStyle = 'black';\r\n\r\n    const bottomY = this.plotPadding + plotHeight + textHalf;\r\n    const middleY = this.plotPadding + (plotHeight / 2) + textHalf;\r\n    const topY = this.plotPadding + textHalf;\r\n\r\n    // Scale\r\n    g.fillText(this.scaleNumber(this.scaleMin), labelInset, bottomY);\r\n    g.fillText(this.scaleNumber(((range / 2) + this.scaleMin)), labelInset, middleY);\r\n    g.fillText(this.scaleNumber(this.scaleMax), labelInset, topY);\r\n\r\n    // Live\r\n    g.fillText(this.scaleNumber(min), rightJustif, bottomY);\r\n    g.fillText(`Avg: ${this.scaleNumber(avg)}`, rightJustif, middleY);\r\n    g.fillText(this.scaleNumber(max), rightJustif, topY);\r\n  }\r\n\r\n  baseDraw() {\r\n    const c = this.canvasEl;\r\n    const g = c.getContext('2d')!;\r\n    const canvasHeight = c.height;\r\n    const canvasWidth = c.width;\r\n\r\n    const plotHeight = canvasHeight - this.plotPadding - this.plotPadding;\r\n    const plotWidth = canvasWidth - this.plotPadding - this.plotPadding;\r\n\r\n    // Clear background\r\n    g.fillStyle = 'white';\r\n    g.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n    // Draw middle line\r\n    if (this.showMiddle) {\r\n      g.lineWidth = 2;\r\n      g.beginPath();\r\n      g.strokeStyle = 'whitesmoke';\r\n      g.moveTo(this.plotPadding, plotHeight / 2 + this.plotPadding);\r\n      g.lineTo(plotWidth, plotHeight / 2 + this.plotPadding);\r\n      g.stroke();\r\n    }\r\n\r\n    // Get subclass to draw\r\n    this.draw(g, plotWidth, plotHeight);\r\n\r\n    this.lastPaint = performance.now();\r\n  }\r\n\r\n  draw(g: CanvasRenderingContext2D, plotWidth: number, plotHeight: number) {}\r\n\r\n  repaint() {\r\n    if (this.paused) return;\r\n\r\n    const elapsed = performance.now() - this.lastPaint;\r\n    if (elapsed >= this.maxPaintMs)\r\n      window.requestAnimationFrame(this.drawLoop);\r\n  }\r\n\r\n}", "import {SlidingWindow} from \"../SlidingWindow.js\"\r\nimport {BasePlot} from \"./BasePlot.js\"\r\n\r\n/**\r\n * Usage:\r\n * let plot = new Plot(plotCanvasEl)\r\n * plot.push(value)\r\n * \r\n * @export\r\n * @class Plot\r\n * @extends {BaseGraph}\r\n */\r\nexport class Plot extends BasePlot {\r\n  buffer: SlidingWindow;\r\n  samples: number;\r\n  color: string = 'silver';\r\n  lineWidth: number = 3;\r\n\r\n  constructor(canvasEl: HTMLCanvasElement, samples = 10) {\r\n    super(canvasEl);\r\n    this.buffer = new SlidingWindow(samples);\r\n    this.samples = samples;\r\n  }\r\n\r\n  draw(g: CanvasRenderingContext2D, plotWidth: number, plotHeight: number) {\r\n    const d = this.buffer.toArray(); // copy\r\n    const dataLength = d.length;\r\n    let {min, max, avg} = this.buffer.getMinMaxAvg();\r\n\r\n    const range = this.pushScale(min, max);\r\n    const lineWidth = plotWidth / dataLength;\r\n\r\n    let x = this.plotPadding;\r\n    if (this.showScale) x += 25;\r\n    g.beginPath();\r\n    g.lineWidth = lineWidth;\r\n    g.strokeStyle = this.color;\r\n    for (let i = 0; i < dataLength; i++) {\r\n      const y = this.map(d[i], this.scaleMin, this.scaleMax, plotHeight, 0) + this.plotPadding;\r\n      if (i == 0)\r\n        g.moveTo(x, y);\r\n      else\r\n        g.lineTo(x, y);\r\n      x += lineWidth;\r\n    }\r\n    g.stroke();\r\n\r\n    g.fillStyle = 'black';\r\n\r\n    this.drawScale(g, min, max, avg, range, plotWidth, plotHeight);\r\n\r\n  }\r\n\r\n  clear() {\r\n    this.buffer.clear(this.samples);\r\n    this.repaint();\r\n  }\r\n\r\n  push(v: number) {\r\n    this.buffer.push(v);\r\n    if (this.paused) return;\r\n    this.repaint();\r\n  }\r\n\r\n}", "import * as Points from '../geometry/Point.js';\r\nimport * as Paths from '../geometry/Path.js';\r\nimport * as Lines from '../geometry/Line.js';\r\nimport {Beziers} from '../index.js';\r\n\r\nexport function paths(ctx: CanvasRenderingContext2D, ...pathsToDraw: Paths.Path[]): void {\r\n  guardCtx(ctx);\r\n\r\n  // Handle an array being passed\r\n  if (Array.isArray(pathsToDraw[0])) return paths(ctx, ...pathsToDraw[0]);\r\n\r\n  for (let i = 0; i < pathsToDraw.length; i++) {\r\n    let p = pathsToDraw[i] as any;\r\n\r\n    // Draw simple line\r\n    if (p.a && p.b && p.quadratic) quadraticBezier(p, ctx, true);\r\n    else if (p.a && p.b) line(p, ctx);\r\n  }\r\n}\r\n\r\nexport function points(ctx: CanvasRenderingContext2D, ...pts: Points.Point[]): void {\r\n  guardCtx(ctx);\r\n\r\n  if (pts.length == 0) return;\r\n\r\n  // Handle an array being passed\r\n  if (Array.isArray(pts[0])) return points(ctx, ...pts[0]);\r\n\r\n  // Throw an error if any point is invalid\r\n  for (let i = 0; i < pts.length; i++) Points.guard(pts[i], 'Index ' + i);\r\n\r\n  // Draw points\r\n  ctx.beginPath();\r\n  ctx.moveTo(pts[0].x, pts[0].y);\r\n  for (let i = 1; i < pts.length; i++) {\r\n    ctx.lineTo(pts[i].x, pts[i].y);\r\n  }\r\n  ctx.stroke();\r\n}\r\n\r\nexport function pointsEnclosed(ctx: CanvasRenderingContext2D, ...pts: Points.Point[]): void {\r\n  guardCtx(ctx);\r\n  if (pts.length == 0) return;\r\n\r\n  // Handle an array being passed\r\n  if (Array.isArray(pts[0])) return pointsEnclosed(ctx, ...pts[0]);\r\n\r\n  // Throw an error if any point is invalid\r\n  for (let i = 0; i < pts.length; i++) Points.guard(pts[i], 'Index ' + i);\r\n\r\n  // Draw points\r\n  ctx.beginPath();\r\n  ctx.moveTo(pts[0].x, pts[0].y);\r\n  for (let i = 1; i < pts.length; i++) {\r\n    ctx.lineTo(pts[i].x, pts[i].y);\r\n  }\r\n  ctx.lineTo(pts[0].x, pts[0].y);\r\n  ctx.stroke();\r\n}\r\n\r\n\r\nexport function pointLabels(ctx: CanvasRenderingContext2D, ...pts: Points.Point[]): void {\r\n  guardCtx(ctx);\r\n\r\n  if (pts.length == 0) return;\r\n\r\n  // Handle an array being passed\r\n  if (Array.isArray(pts[0])) return pointLabels(ctx, ...pts[0]);\r\n\r\n  // Throw an error if any point is invalid\r\n  for (let i = 0; i < pts.length; i++) Points.guard(pts[i], 'Index ' + i);\r\n\r\n  for (let i = 0; i < pts.length; i++) {\r\n    ctx.fillText(i.toString(), pts[i].x, pts[i].y);\r\n  }\r\n}\r\n\r\nfunction guardCtx(ctx: CanvasRenderingContext2D | any) {\r\n  if (ctx === undefined) throw Error('ctx undefined');\r\n}\r\n\r\nfunction drawDot(pos: Points.Point, size: number, ctx: CanvasRenderingContext2D, fillStyle = 'red') {\r\n  ctx.beginPath();\r\n  ctx.strokeStyle = fillStyle;\r\n\r\n  // x&y for arc is the center of circle\r\n  ctx.arc(pos.x, pos.y, size, 0, 2 * Math.PI);\r\n  ctx.stroke();\r\n}\r\n\r\nexport function quadraticBezier(line: Beziers.QuadraticBezier, ctx: CanvasRenderingContext2D, debug: boolean = false) {\r\n  guardCtx(ctx);\r\n\r\n  const h = line.quadratic;\r\n  const ss = ctx.strokeStyle;\r\n  if (debug) {\r\n    ctx.strokeStyle = 'whitesmoke'\r\n    points(ctx, line.a, h, line.b);\r\n    ctx.strokeStyle = ss;\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(line.a.x, line.a.y);\r\n  ctx.quadraticCurveTo(h.x, h.y, line.b.x, line.b.y);\r\n  ctx.stroke();\r\n\r\n  if (debug) {\r\n    ctx.fillText('a', line.a.x + 5, line.a.y);\r\n    ctx.fillText('b', line.b.x + 5, line.b.y);\r\n    ctx.fillText('h', h.x + 5, h.y);\r\n    drawDot(h, 5, ctx);\r\n    drawDot(line.a, 5, ctx, 'black');\r\n    drawDot(line.b, 5, ctx, 'black');\r\n  }\r\n}\r\n\r\nexport function line(line: Lines.Line, ctx: CanvasRenderingContext2D, debug: boolean = false) {\r\n  guardCtx(ctx);\r\n  ctx.beginPath();\r\n  ctx.moveTo(line.a.x, line.a.y);\r\n  ctx.lineTo(line.b.x, line.b.y);\r\n  if (debug) {\r\n    ctx.fillText('a', line.a.x, line.a.y);\r\n    ctx.fillText('b', line.b.x, line.b.y);\r\n    drawDot(line.a, 5, ctx, 'black');\r\n    drawDot(line.b, 5, ctx, 'black');\r\n  }\r\n  ctx.stroke();\r\n}"],
  "mappings": "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",
  "names": []
}
