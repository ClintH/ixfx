import { clamp } from "@ixfx/numbers";
import type { Colourish, Rgb, Rgb8Bit, RgbScalar } from "./types.js";
import { hslToScalar } from "./hsl.js";
import { oklchToAbsolute } from "./oklch.js";
import { numberInclusiveRangeTest, throwFromResult } from "@ixfx/guards";
import type { Result } from "@ixfx/core";
import * as C from "colorizr";
import { toColour } from "./resolve-to-color.js";

/**
 * Converts to scalar Rgb value.
 * RGB are 0..255 scale, opacity is always 0..1 scale
 * @param r 
 * @param g 
 * @param b 
 * @param opacity 
 * @returns 
 */
const scalarFromAbsolute = (r: number, g: number, b: number, opacity = 255, clamped = true): RgbScalar => {
  if (clamped) {
    r = clamp(r / 255);
    g = clamp(g / 255);
    b = clamp(b / 255);
    opacity = clamp(opacity);
    return {
      r, g, b, opacity, unit: `scalar`, space: `srgb`
    }
  } else {
    r = r / 255;
    g = g / 255;
    b = b / 255;
    return {
      r, g, b, opacity, unit: `scalar`, space: `srgb`
    }
  }
}



export const isRgb = (p: Colourish | undefined | null, validate = false): p is Rgb => {
  if (typeof p === `undefined` || p === null) return false;
  if (typeof p !== `object`) return false;

  const space = p.space;
  if (space !== `srgb` && typeof space !== `undefined`) return false;
  const pp = p as Rgb;
  if (typeof pp.r === `undefined`) return false;
  if (typeof pp.g === `undefined`) return false;
  if (typeof pp.b === `undefined`) return false;

  if (validate) {
    if (`opacity` in pp) {
      throwFromResult(numberInclusiveRangeTest(pp.opacity, 0, 1, `opacity`));
    }
    if (pp.unit === `scalar`) {
      throwFromResult(numberInclusiveRangeTest(pp.r, 0, 1, `r`));
      throwFromResult(numberInclusiveRangeTest(pp.g, 0, 1, `g`));
      throwFromResult(numberInclusiveRangeTest(pp.b, 0, 1, `b`));
    } else if (pp.unit === `8bit`) {
      throwFromResult(numberInclusiveRangeTest(pp.r, 0, 255, `r`));
      throwFromResult(numberInclusiveRangeTest(pp.g, 0, 255, `g`));
      throwFromResult(numberInclusiveRangeTest(pp.b, 0, 255, `b`));
    }
  }
  return true;
};

// export const rgbToColorJs = (rgb: Rgb): ColorConstructor => {
//   const rel = rgbToRelative(rgb);
//   return {
//     alpha: rel.opacity,
//     coords: [ rgb.r, rgb.g, rgb.b ],
//     spaceId: `sRGB`
//   }
// }

export const rgbToCss = (rgb: Rgb, clamped = true): string => {
  const abs = rgbTo8bit(rgb, clamped);
  if (`opacity` in abs || typeof abs.opacity !== `undefined`) {
    return `rgba(${ abs.r },${ abs.g },${ abs.b },${ abs.opacity })`;
  }
  return `rgb(${ abs.r },${ abs.g },${ abs.b })`;
}

const libraryToScalar = (colour: unknown): RgbScalar => {
  if (C.isRGB(colour)) {
    return libraryRgbToScalar(colour);
  }
  if (C.isHSL(colour)) {
    return libraryToScalar(C.hsl2rgb(colour));
  }
  if (C.isLAB(colour)) {
    return libraryToScalar(C.oklab2rgb(colour));
  }
  if (C.isLCH(colour)) {
    return libraryToScalar(C.oklch2rgb(colour));
  }
  if (C.isHex(colour)) {
    return libraryRgbToScalar(C.hex2rgb(colour));
  }
  throw new Error(`Unexpected colour format`);
}

export const rgbFromCss = (css: string): RgbScalar => {
  if (css.startsWith(`#`)) {
    libraryRgbToScalar(C.hex2rgb(css));
  }
  const p = C.extractColorParts(css);
  return libraryToScalar(p);
}

const libraryRgbToScalar = (c: C.RGB): RgbScalar => {
  return {
    r: c.r / 255,
    g: c.g / 255,
    b: c.b / 255,
    opacity: c.alpha ?? 1,
    unit: `scalar`,
    space: `srgb`
  }
}

/**
 * Parses colour to `{ r, g, b }` where each field is on 0..1 scale.
 * `opacity` field is added if opacity is not 1.
 * [Named colours](https://html-color-codes.info/color-names/)
 * @param colour
 * @returns
 */
export const toRgbScalar = (colourish: Colourish): RgbScalar => {
  if (typeof colourish === `string` && colourish === `transparent`) return { r: 1, g: 1, b: 1, opacity: 0, space: `srgb`, unit: `scalar` };
  const colour = toColour(colourish);

  switch (colour.space) {
    case `hsl`:
      {
        const hslRel = hslToScalar(colour);
        return libraryRgbToScalar(C.hsl2rgb({ h: hslRel.h, s: hslRel.s, l: hslRel.l }));
      }
    case `oklch`:
      {
        const lch = oklchToAbsolute(colour);
        return libraryRgbToScalar(C.oklch2rgb({ l: lch.l, c: lch.c, h: lch.h, alpha: lch.opacity }));
      }
    case `srgb`:
      return rgbToScalar(colour);
    default:
      throw new Error(`Unknown colour space: ${ colour.space }`);
  }
};


/**
 * Converts a relative RGB value to RGB & opacity values on 0...255 scale.
 * By default values are clamped so they don't exceed scale.
 * @param rgb 
 * @param clamped 
 * @returns 
 */
export const rgbTo8bit = (rgb: Rgb, clamped = true): Rgb8Bit => {
  if (rgb.unit === `8bit`) return rgb;
  let r = rgb.r * 255;
  let g = rgb.g * 255;
  let b = rgb.b * 255;
  let opacity = (rgb.opacity ?? 1) * 255;
  if (clamped) {
    r = clamp(r, 0, 255);
    g = clamp(g, 0, 255);
    b = clamp(b, 0, 255);
    opacity = clamp(opacity, 0, 255);
  }
  return { r, g, b, opacity, unit: `8bit`, space: `srgb` }
}

export const rgbToScalar = (rgb: Rgb, clamped = true): RgbScalar => {
  if (rgb.unit === `scalar`) return rgb;
  return scalarFromAbsolute(rgb.r, rgb.g, rgb.b, rgb.opacity, clamped);
}

// export const rgbToScalar = (rgb: Rgb, clamped = true): RgbScalar => {
//   if (rgb.unit === `scalar`) return rgb;
//   if (rgb.unit === `8bit`) {
//     let r = rgb.r / 255;
//     let g = rgb.g / 255;
//     let b = rgb.b / 255;
//     let opacity = (rgb.opacity ?? 255) / 255;
//     if (clamped) {
//       r = clamp(r);
//       g = clamp(g);
//       b = clamp(b);
//       opacity = clamp(opacity);
//     }
//     return {
//       r, g, b, opacity, unit: `scalar`, space: `srgb`
//     }
//   } else {
//     throw new Error(`Unknown unit. Expected '8bit'`);
//   }
// }

/**
 * Ensures `rgb` uses 0..255 scale for r,g & b values.
 * If `rgb` is already in 8-bit scale (ie it has unit:'8bit')
 * it is returned.
 * @param rgb
 * @returns
 */
// export const toRgb8bit = (rgb: Rgb): Rgb8Bit => {
//   const result = parseRgbObject(rgb);
//   throwResult(result);

//   if (rgb.unit === `8bit`) return rgb as Rgb8Bit;

//   const { r, g, b, opacity } = rgb;

//   const t: Rgb8Bit = {
//     r: r * 255,
//     g: g * 255,
//     b: b * 255,
//     unit: `8bit`,
//     space: rgb.space
//   }
//   if (opacity !== undefined) return { ...t, opacity: opacity * 255 };
//   return t;
// }

/**
 * Tries to parse an object in forms:
 * `{r,g,b}`, `{red,green,blue}`.
 * Uses 'opacity', 'space' and 'unit' fields where available.
 * 
 * If 'units' is not specified, it tries to guess if it's relative (0..1) or
 * 8-bit (0..255).
 * 
 * Normalises to an Rgb structure if it can, or returns an error.
 * @param p 
 * @returns 
 */
export const parseRgbObject = (p: unknown): Result<Rgb> => {
  if (p === undefined || p === null) return { success: false, error: `Undefined/null` }
  if (typeof p !== `object`) return { success: false, error: `Not an object` };

  const space = `space` in p ? p.space as string : `srgb`;
  let r = `r` in p ? p.r as number : undefined;
  let g = `g` in p ? p.g as number : undefined;
  let b = `b` in p ? p.b as number : undefined;
  let opacity = `opacity` in p ? p.opacity as number : 0;

  if (r !== undefined || g !== undefined || b !== undefined) {
    // Short field names
  } else {
    // Check for long field names
    const red = `red` in p ? p.red as number : undefined;
    const green = `green` in p ? p.green as number : undefined;
    const blue = `blue` in p ? p.blue as number : undefined;

    if (red !== undefined || green !== undefined || blue !== undefined) {
      r = red;
      g = green;
      b = blue;
    } else return { success: false, error: `Does not contain r,g,b or red,green,blue` }
  }
  if (r === undefined) throw new Error(`Red value missing`);
  if (g === undefined) throw new Error(`Green value missing`);
  if (b === undefined) throw new Error(`Blue value missing`);

  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  let unit = (p as any).unit as (string | undefined);
  if (unit === `scalar`) {
    if (r > 1 || r < 0) return { success: false, error: `Scalar units, but 'r' exceeds 0..1` };
    if (g > 1 || g < 0) return { success: false, error: `Scalar units, but 'g' exceeds 0..1` };
    if (b > 1 || b < 0) return { success: false, error: `Scalar units, but 'b' exceeds 0..1` };
    if (opacity > 1 || opacity < 0) return { success: false, error: `Scalar units, but opacity exceeds 0..1` };
  } else if (unit === `8bit`) {
    if (r > 255 || r < 0) return { success: false, error: `8bit units, but r exceeds 0..255` };
    if (g > 255 || g < 0) return { success: false, error: `8bit units, but g exceeds 0..255` };
    if (b > 255 || b < 0) return { success: false, error: `8bit units, but b exceeds 0..255` };
    if (opacity > 255 || opacity < 0) return { success: false, error: `8bit units, but opacity exceeds 0..255` };
  } else if (!unit) {
    if (r > 1 || g > 1 || b > 1) {
      if (r <= 255 && g <= 255 && b <= 255) {
        unit = `8bit`;
      } else return { success: false, error: `Unknown units, outside 0..255 range` };
    } else if (r <= 1 && g <= 1 && b <= 1) {
      if (r >= 0 && g >= 0 && b >= 0) {
        unit = `scalar`;
      } else return { success: false, error: `Unknown units, outside of 0..1 range` };
    } else return { success: false, error: `Unknown units for r,g,b,opacity values` };
  }
  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
  if (opacity === undefined) {
    opacity = unit === `8bit` ? 255 : 1;
  }

  if (unit !== `8bit` && unit !== `scalar`) throw new Error(`Unit expected to be '8bit' or 'scalar. Got: '${ unit }'`);
  if (space !== `srgb`) throw new Error(`Space is expected to be 'srgb'. Got: '${ space }'`)
  const c: Rgb = {
    r, g, b, opacity, unit, space
  }
  return { success: true, value: c };
};