//import type { ColorConstructor } from "./colorjs.types.js";
import type { Colourish, OkLch, OkLchAbsolute, OkLchScalar } from "./types.js";
import { numberTest, throwIfFailed } from "@ixfx/guards";
import * as C from "colorizr";
const oklchGuard = (lch: OkLch) => {
  switch (lch.unit) {
    case `scalar`:
      throwIfFailed(
        numberTest(lch.l, `percentage`, `lch.l`),
        numberTest(lch.c, `percentage`, `lch.c`),
        numberTest(lch.h, `percentage`, `lch.h`),
        numberTest(lch.opacity, `percentage`, `lch.opacity`)
      );
      break;
    case `absolute`:
      throwIfFailed(
        numberTest(lch.l, `percentage`, `lch.l`),
        numberTest(lch.c, `percentage`, `lch.c`),
        numberTest(lch.opacity, `percentage`, `lch.opacity`)
      );
      break;
    default:
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-expect-error
      throw new Error(`Unknown unit: ${ lch.unit }`);
  }

}

const libraryLchToScalar = (c: C.LCH): OkLchScalar => {
  return {
    l: c.h,
    c: c.c,
    h: c.h / 360,
    opacity: c.alpha ?? 1,
    unit: `scalar`,
    space: `oklch`
  }
}

export const oklchToAbsolute = (lch: OkLch): OkLchAbsolute => {
  if (lch.unit === `absolute`) return lch;
  return {
    space: `oklch`,
    unit: `absolute`,
    l: lch.l * 100,
    c: lch.c * 100,
    h: lch.h * 360,
    opacity: lch.opacity
  }
}

export const oklchToCss = (lch: OkLch): string => {
  oklchGuard(lch);
  const { l, c, h, opacity } = lch;
  let css = ``;
  switch (lch.unit) {
    case `absolute`:
      css = `lch(${ l }% ${ c }% ${ h })`
  }
  if (typeof opacity !== `undefined`) {
    css += ` / ${ opacity }`;
  }
  css += `)`;
  return css;
}

export const oklchFromCss = (css: string): OkLchScalar => {
  if (css.startsWith(`#`)) {
    libraryLchToScalar(C.hex2oklch(css));
  }
  const p = C.extractColorParts(css);
  return libraryToScalar(p);
}

const libraryToScalar = (colour: unknown): OkLchScalar => {
  if (C.isLCH(colour)) {
    return libraryLchToScalar(colour);
  }
  if (C.isRGB(colour)) {
    return libraryToScalar(C.rgb2oklch(colour));
  }
  if (C.isLAB(colour)) {
    return libraryToScalar(C.oklab2oklch(colour));
  }
  if (C.isHSL(colour)) {
    return libraryToScalar(C.hsl2oklch(colour));
  }
  if (C.isHex(colour)) {
    return libraryLchToScalar(C.hex2oklch(colour));
  }
  throw new Error(`Unexpected colour format`);
}

// export const oklchToColorJs = (lch: OkLch): ColorConstructor => {
//   throwNumberTest(lch.l, `percentage`, `lch.l`);
//   throwNumberTest(lch.c, `percentage`, `lch.c`);
//   throwNumberTest(lch.h, `percentage`, `lch.h`);
//   throwNumberTest(lch.opacity, `percentage`, `lch.opacity`);
//   return {
//     alpha: lch.opacity,
//     coords: [ lch.l, lch.c * 0.4, lch.h * 360 ],
//     spaceId: `oklch`
//   }
// }

// const oklchToColorJs = (oklch: OkLch) => {
//   throwNumberTest(oklch.l, `percentage`, `oklch.l`);
//   throwNumberTest(oklch.c, `percentage`, `oklch.c`);
//   throwNumberTest(oklch.h, `percentage`, `oklch.h`);
//   throwNumberTest(oklch.opacity, `percentage`, `oklch.opacity`);
//   const coords: [ number, number, number ] = [
//     oklch.l,
//     oklch.c * 0.4,
//     oklch.h * 360
//   ]
//   return new ColorJs.default(`oklch`, coords, oklch.opacity);
// }

export const isOklch = (p: Colourish | undefined | null): p is OkLch => {
  if (typeof p === `undefined` || p === null) return false;
  if (typeof p !== `object`) return false;

  // Check if Colourjs
  //if ((p as ColorJs.ColorObject).spaceId !== undefined) return false;
  //if ((p as ColorJs.ColorObject).coords !== undefined) return false;
  if (p.space !== `oklch`) return false;
  if (typeof p.l === `undefined`) return false;
  if (typeof p.c === `undefined`) return false;
  if (typeof p.h === `undefined`) return false;
  return true;
}